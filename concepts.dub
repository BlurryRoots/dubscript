wobble "ideas";

/*
 * Hardwire Component system model!?
 */

// shiööt
// define and set a to 1.618
def! a 1.618;
/* there is no if in dubscript
 * the basic control structure is the colon
 * it expects at least one callback, which is
 * evaluated when the head expression is true */
def? a : true { // the true here is optional
    print "a is a "         
          number? a
          // if you dont give a pattern to match, true is assumed by default
          : { return "number"; } 
          // the return statment is optional, by default the last expression
          // is returned
          : false { a.type.string; };
    println "a is defined as " a.string;
};

def! b "be";
rm! b;
// b is not set
def? b : false {
    println "b has not been defined";
};
// you can also do this
~ def? b : {
    print "b has not been defined!\n";
};

// define c true and d as number 23
def! c false;
def! d 23;
// set c to true0
set! c true;
// now check if c is true and d is either 42 or 23
c & ((d = 42) | (d = 23)) : {
    println "c is true and d is " d.string;
};
// which can also be accomblished by 
print "c is " (c : {
    concat "true"
           (d : 42 | 23 { " and d is " d.string; });
});

// here a list of numbers from 1 to 6 a reduced
// by the logic privided by the anonymous function
// or lamnda and then assigned to f
def! e [1 2 3 4 5 6].reduce lam x y -> { x + y; };

// defining a function to add two numbers
def! add lam a b -> {
    a + b;
};
println "calling add with 1111 and 226 is "
        (add 1111 226).string;
// undefining add to show you an alternatife
// to function definitions
rm! add;
// alternativly you could've done
fun add a b {
    a + b;
};

// lets do some fancy stuff
// create a temporary list, get a reversed copy of it
// and start an iteration
def! g [12 4 1 5 23].reverse;
g.foreach lam index value -> {
    // the iteration is done by providing a callback
    // which calls the add function and if the given
    // pattern is matched, prints the result
    print "i: " index.string;
    (add 1 value) : value * 2 {
        println " and 1 minus value(" value.string ")"
                " is equal to value*2(" (value * 2).string ")";
    } : 5 {
        println " and 1 plus " value.string " is 5";
    };
};

// how about some regular expressions?
// lets morph part into valid json
def! menu "würste 3.14€".replace @([\wöäü]+)( )(\d\.\d+)(€)@
                                 @{ "$1" : $3 }@;
println menu; // which prints { "würste" : 3.14 }

// it is possible for types implementing the rewind
// feature, to obtain the value set previous to the
// current one.
def! anum 12;
set! anum anum++;
println "anum is " anum.string;
println "previous value was " anum.rewind.string;
